
#include <WiFi.h>                  This seems most relevant ATM, but this library was retired and is no longer maintained.
                                   This library is compatible with all architectures so you should be able to use it on all the Arduino boards.
// #include <Button.h>             // We dont really need to import a zip file library into the Arduino for a 
                                   single button, as it can be implemented easily. Toggle button is another question.                        
// #include <SPI.h>                This seems irrelevant ATM for our Use Case. 
                                   Serial Peripheral Interface (SPI) is a synchronous serial data protocol used by 
                                   Microcontrollers for communicating with one or more peripheral devices quickly over short 
                                   distances. It can also be used for communication between two microcontrollers.
                                   With an SPI connection there is always one Controller device (usually a microcontroller) 
                                   which controls the peripheral devices. Typically there are three lines common to all the devices:
                                   Controller In, Peripheral Out (CIPO) - The Peripheral line for sending data to the Controller,
                                   Controller Out Peripheral In (COPI) - The Controller line for sending data to the Peripherals,
                                   Serial Clock (SCK) - The clock pulses which synchronize data transmission generated by the 
                                   Controller, and Chip Select pin (CS) - allocated on each device which the Controller 
                                   can use to enable and disable specific devices and avoid false transmissions due to line noise.
#include <Encoder.h>               This one needs more investigation still.....
// #include "config.h"             // Discuss this open!  Propably no credentials needed, so this is irrelevant otherwise?

// TODO's below: 
// Unlike TCP sockets connection between the server and its clients, or webSockets upon HTTP, we do not require ACK,
   but we still need to have some sort of valid verification method.
  
void setup() {
  Serial.begin(9600);              // initialize serial communication
  pinMode(0, INPUT_PULLUP);        // initialize encoder pins
  pinMode(1, INPUT_PULLUP);
  pinMode(connectLED, OUTPUT);     // initialize LED pins
  pinMode(playLED, OUTPUT);
  connectButton.begin();           // initialize buttons
  playButton.begin();

 while ( WiFi.status() != WL_CONNECTED) {
     WiFi.begin                    // try to connect
     delay(2000);                  // We stay inside the loop, until being connected.
 }
  
  
